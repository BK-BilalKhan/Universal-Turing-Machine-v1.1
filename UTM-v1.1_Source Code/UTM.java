package universalturingmachine;

import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import sun.misc.IOUtils;

/*
 Author Bilal (K132314)
 Created on 22/March/2015
 */
public class UTM extends javax.swing.JFrame {

    public UTM() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
        initComponents();       // Create Frame
        this.setLocationRelativeTo(null);
        setIcon();              // Set Icon
        otherProperties();      // False/True
        tapeSize = tape.getSize();
        panelSize = jPanel1.getSize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tape = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        currentState = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        steps = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        run = new javax.swing.JButton();
        fullSpeed = new javax.swing.JCheckBox();
        reset = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        initialInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        initialState = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        finalState = new javax.swing.JTextField();
        loadProgram = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        Encode = new javax.swing.JButton();
        Decode = new javax.swing.JButton();
        tapeSpeed = new javax.swing.JSlider();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        program = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Universal Turing Machine 1.1");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("UTM_Frame"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tape", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        tape.setBackground(new java.awt.Color(249, 249, 249));
        tape.setColumns(20);
        tape.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        tape.setForeground(new java.awt.Color(204, 0, 51));
        tape.setRows(5);
        tape.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        tape.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tapeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tape);
        tape.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Current State", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        currentState.setBackground(new java.awt.Color(249, 249, 249));
        currentState.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(currentState, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(currentState)
        );

        currentState.setEditable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Steps", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        steps.setBackground(new java.awt.Color(249, 249, 249));
        steps.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(steps, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(steps, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );

        steps.setEditable(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Control", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP), "Control", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        run.setText("Run");
        run.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                runMousePressed(evt);
            }
        });
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        fullSpeed.setText("Run at Full Speed");
        fullSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullSpeedActionPerformed(evt);
            }
        });

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Initial Input:");

        initialInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                initialInputMousePressed(evt);
            }
        });
        initialInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialInputActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Initial State:");

        initialState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                initialStateMousePressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Final State:");

        finalState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                finalStateMousePressed(evt);
            }
        });

        loadProgram.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select/Load Program", "Universal Turing Machine", "Unary Addition", "Palindrome", "AnBn" }));
        loadProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadProgramActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Load an Program");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Encoding / Decoding of UTM", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        Encode.setText("Encode");
        Encode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncodeActionPerformed(evt);
            }
        });

        Decode.setText("Decode");
        Decode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(Encode, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Decode, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Encode)
                    .addComponent(Decode))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tapeSpeed.setToolTipText("Tape Speed");
        tapeSpeed.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tapeSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tapeSpeedStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)
                        .addComponent(initialInput))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(28, 28, 28)
                        .addComponent(initialState))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(32, 32, 32)
                        .addComponent(finalState))
                    .addComponent(loadProgram, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(run, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reset, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tapeSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(fullSpeed)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(run)
                    .addComponent(tapeSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(reset)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fullSpeed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(initialInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(initialState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(finalState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadProgram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        initialInput.setEditable(false);
        initialState.setEditable(false);
        finalState.setEditable(false);
        tapeSpeed.setMinorTickSpacing(2);
        tapeSpeed.setMajorTickSpacing(10);
        tapeSpeed.setPaintTicks(true);
        tapeSpeed.setLabelTable(tapeSpeed.createStandardLabels(10));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Turing Machine Program"));

        program.setBackground(new java.awt.Color(249, 249, 249));
        program.setColumns(20);
        program.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        program.setRows(5);
        program.setText("Syntax:\nEach line should contain one tuple of the form '<current state> <current symbol> <new state> <new symbol> <direction>'.\nYou can use any number or word for <current state> and <new state>, eg. 10, 6, q1. Labels are not case-sensitive (i.e: Q1, q1 is same).\nYou can use any character for <current symbol> and <new symbol>, or 'D' to represent blank (space). Blank symbol are case-sensitive.\n<direction> should be 'R', 'L' or 'S', denoting 'move left', 'move right' or 'do not move', respectively.\nAnything after a '//' is a comment and is ignored.\nThe machine halts when it reaches any state starting with 'f, final transition', eg. Halt, Halt and Accept.\nAlso work with encoded transition i.e:\n(q0,a) → (q1, c, R)\n101011011101 00….. So on.");
        program.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                programMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(program);
        program.setEditable(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        File.setText("File");

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        openFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/universalturingmachine/Open File (16x16).png"))); // NOI18N
        openFile.setText("Open File                     ");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        File.add(openFile);

        saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/universalturingmachine/Save As... - TXT (16x16).png"))); // NOI18N
        saveAs.setText("Save As...");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });
        File.add(saveAs);
        File.add(jSeparator1);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/universalturingmachine/Exit.png"))); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Help.setText("Help");
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });

        About.setIcon(new javax.swing.ImageIcon(getClass().getResource("/universalturingmachine/About.png"))); // NOI18N
        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );

        getAccessibleContext().setAccessibleDescription("Universal Turing Machine - Generic");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_initialInputActionPerformed

    private void loadProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadProgramActionPerformed
        // TODO add your handling code here:
        boolean isUTM = true;
        Object LP = loadProgram.getSelectedItem();
        if (LP != null) {
            programTXT = LP.toString();
        }
        String tmpPrev = "";
        initialInput.setEditable(true);
        initialState.setEditable(true);
        finalState.setEditable(true);
        if ("Select/Load Program".equals(programTXT)) {
            program.setText("Please load or write a turing machine program.");
            tape.setText("");
            program.setEditable(false);
            tape.setEditable(false);
            initialInput.setEditable(false);
            initialState.setEditable(false);
            finalState.setEditable(false);
            initialInput.setText("");
            initialState.setText("");
            finalState.setText("");
            program.setEditable(false);
            currentState.setText("");
            steps.setText("");
            Encode.setEnabled(false);
            Decode.setEnabled(false);
            isUTM = false;
        } else if ("Universal Turing Machine".equals(programTXT)) {
            //tmpPrev = UTMFiling("UTM (Filling).txt");
            initialState.setEditable(true);
            finalState.setEditable(true);
            program.setEditable(true);
            program.setText("// Universal Turing Machine\n// Write it.");
            initialInput.setText("");
            currentState.setText("0");
            initialState.setText("");
            finalState.setText("");
            //currentState.setText(TM_P.getInitialState(TM_P.getUTM(), 0));
            steps.setText("0");
            //program.setText(tmpPrev);
            tape.setText("");
            isProgramLoad = true;
        } else if ("Unary Addition".equals(programTXT)) {
            TM_P.setUTM(TM_P.getUnaryAdditionMachine());
            program.setText("(q0, 1) = (q0, 1, R)	// Initial State\n"
                    + "(q0, 0) = (q1, 1, R)\n"
                    + "(q1, 1) = (q1, 1, R)\n"
                    + "(q1, D) = (q2, D, L)\n"
                    + "(q2, 1) = (q3, 0, L)\n"
                    + "(q3, 1) = (q3, 1, L)\n"
                    + "(q3, D) = (q4, D, R)	// Final State");
            initialInput.setText("111101111111111");
            initialState.setText("0");
            finalState.setText("4");
            currentState.setText("0");
            steps.setText("0");
            tape.setText("");
            isProgramLoad = true;
            program.setEditable(false);
        } else if ("Palindrome".equals(programTXT)) {
            TM_P.setUTM(TM_P.getPalindromeMachine());
            program.setText("(q0, 0) = (q1, X, R)   // Initial State\n"
                    + "(q0, 1) = (q2, Y, R)\n"
                    + "(q0, X) = (q6, X, R)\n"
                    + "(q0, Y) = (q6, Y, R)\n"
                    + "(q0, D) = (q6, D, R)\n"
                    + "(q1, 0) = (q1, 0, R)\n"
                    + "(q1, 1) = (q1, 1, R)\n"
                    + "(q1, X) = (q3, X, L)\n"
                    + "(q1, Y) = (q3, Y, L)\n"
                    + "(q1, D) = (q3, D, L)\n"
                    + "(q2, 0) = (q2, 0, R)\n"
                    + "(q2, 1) = (q2, 1, R)\n"
                    + "(q2, X) = (q4, X, L)\n"
                    + "(q2, Y) = (q4, Y, L)\n"
                    + "(q2, D) = (q4, D, L)\n"
                    + "(q3, 0) = (q5, X, L)\n"
                    + "(q3, X) = (q6, X, R)\n"
                    + "(q3, Y) = (q6, Y, R)\n"
                    + "(q4, 1) = (q5, Y, L)\n"
                    + "(q4, X) = (q6, X, R)\n"
                    + "(q4, Y) = (q6, Y, R)\n"
                    + "(q5, 0) = (q5, 0, L)\n"
                    + "(q5, 1) = (q5, 1, L)\n"
                    + "(q5, X) = (q0, X, R)\n"
                    + "(q5, Y) = (q0, Y, R)\n"
                    + "(q6, Y) = (q6, Y, R)\n"
                    + "(q6, X) = (q6, X, R)\n"
                    + "(q6, D) = (q7, D, L)   // Final State");
            initialInput.setText("1101001001011");
            initialState.setText("0");
            finalState.setText("7");
            currentState.setText("0");
            steps.setText("0");
            tape.setText("");
            isProgramLoad = true;
            program.setEditable(false);
        } else if ("AnBn".equals(programTXT)) {
            TM_P.setUTM(TM_P.getAnBnMachine());
            program.setText("(q0, a) = (q1, x, R)	// Initial State\n"
                    + "(q0, y) = (q3, y, R)\n"
                    + "(q1, a) = (q1, a, R)\n"
                    + "(q1, y) = (q1, y, R)\n"
                    + "(q1, b) = (q2, y, L)\n"
                    + "(q2, a) = (q2, a, L)\n"
                    + "(q2, y) = (q2, y, L)\n"
                    + "(q2, x) = (q0, x, R)\n"
                    + "(q3, y) = (q3, y, R)\n"
                    + "(q3, D) = (q4, D, L)	// Final State");
            initialInput.setText("aaaaaabbbbbb");
            initialState.setText("0");
            finalState.setText("4");
            currentState.setText("0");
            steps.setText("0");
            tape.setText("");
            isProgramLoad = true;
            program.setEditable(false);
        } else {
            isProgramLoad = false;
            initialInput.setText("");
            initialState.setText("");
            finalState.setText("");
            steps.setText("");
            currentState.setText("");
            program.setText("");
            tape.setText("");
        }
        if (programColor != Color.white) {
            programColor = new Color(249, 249, 249);
        }
        if ("Universal Turing Machine".equals(programTXT)) {
            program.setBackground(Color.white);
        } else {
            initialState.setEditable(false);
            finalState.setEditable(false);
            program.setBackground(programColor);
        }
        if (isUTM) {
            Encode.setEnabled(true);
            Decode.setEnabled(true);
        }
    }//GEN-LAST:event_loadProgramActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        // TODO add your handling code here:
        tape.update(tape.getGraphics());
        tape.setText("");
        if (isProgramLoad == true) {
            if ("".equals(program.getText()) && programTXT == "Universal Turing Machine"
                    || "// Universal Turing Machine\n// Write it.".equals(program.getText())
                    || "Please load or write a turing machine program.".equals(program.getText())) {
                program.setText("Please load or write a turing machine program.");
                ImageIcon icon = new ImageIcon(UTM.class.getResource("Exit (32 x 32).png"));
                Object[] options = {"  OK  "};
                int n = JOptionPane.showOptionDialog(this.rootPane,
                        "Please load or write a turing machine program.",
                        "Error",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        icon,
                        options,
                        options[0]);
                return;
            }
            if (!"".equals(initialInput.getText()) && !"".equals(initialState.getText()) && !"".equals(finalState.getText())) {
                tape.setText(initialInput.getText());
                if ("".equals(program.getText()) && programTXT == "Universal Turing Machine"
                        || "// Universal Turing Machine\n// Write it.".equals(program.getText())) {
                    program.setText("Please load or write a turing machine program.");
                }
                char[] inputOfUTM = new char[initialInput.getText().length()];
                inputOfUTM = new char[initialInput.getText().length()];
                for (int i = 0; i < initialInput.getText().length(); i++) {
                    inputOfUTM[i] = initialInput.getText().charAt(i);
                }
                if (programTXT == "Universal Turing Machine") {
                    String tmp = program.getText();
                    this.DecodeActionPerformed(evt);
                    program.setText(tmp);
                }
                try {
                    currentState.setText("Halt");
                    UTM.UTM_Simulate(TM_P.getUTM(), inputOfUTM,
                            Integer.parseInt(initialState.getText()), tape, currentState, steps, finalState, tapeFullSpeed);
                } catch(Exception e) {
                    ImageIcon icon = new ImageIcon(UTM.class.getResource("Exit (32 x 32).png"));
                    Object[] options = {"  OK  "};
                    int n = JOptionPane.showOptionDialog(this.rootPane,
                                                        "Program/Transition is not correct.",
                                                        "Error",
                                                        JOptionPane.YES_NO_CANCEL_OPTION,
                                                        JOptionPane.QUESTION_MESSAGE,
                                                        icon,
                                                        options,
                                                        options[0]);
                }
            } else {
                tape.setText("Initial Input or Initial State or Final State is Empty.");
                ImageIcon icon = new ImageIcon(UTM.class.getResource("Exit (32 x 32).png"));
                Object[] options = {"  OK  "};
                int n = JOptionPane.showOptionDialog(this.rootPane,
                        "Initial Input or Initial State or Final State is Empty.",
                        "Error",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        icon,
                        options,
                        options[0]);
            }

        } else {
            tape.setText("Program not Loaded.");
            program.setText("Please load program in control menu.");
            ImageIcon icon = new ImageIcon(UTM.class.getResource("Exit (32 x 32).png"));
            Object[] options = {"  OK  "};
            int n = JOptionPane.showOptionDialog(this.rootPane,
                    "Program not Loaded.",
                    "Error",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    icon,
                    options,
                    options[0]);
        }
    }//GEN-LAST:event_runActionPerformed

    private void programMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_programMousePressed
        // TODO add your handling code here:
        if ("".equals(program.getText()) && programTXT == "Universal Turing Machine"
                || "// Universal Turing Machine\n// Write it.".equals(program.getText())
                || "Please load or write a turing machine program.".equals(program.getText())) {
            program.setText("");
        }
    }//GEN-LAST:event_programMousePressed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        if (programTXT == "Universal Turing Machine") {
            program.setText("// Universal Turing Machine\n// Write it.");
            initialState.setText("");
            finalState.setText("");
        }
        initialInput.setText("");
        tape.setText("");
        currentState.setText("");
        steps.setText("0");
    }//GEN-LAST:event_resetActionPerformed

    private void initialInputMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_initialInputMousePressed
        // TODO add your handling code here:
        initialInput.setText("");
    }//GEN-LAST:event_initialInputMousePressed

    private void initialStateMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_initialStateMousePressed
        // TODO add your handling code here:
        if (programTXT == "Universal Turing Machine") {
            initialState.setText("");
        }
    }//GEN-LAST:event_initialStateMousePressed

    private void finalStateMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finalStateMousePressed
        // TODO add your handling code here:
        if (programTXT == "Universal Turing Machine") {
            finalState.setText("");
        }
    }//GEN-LAST:event_finalStateMousePressed

    private void runMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runMousePressed
        // TODO add your handling code here:
        tape.setText("");
    }//GEN-LAST:event_runMousePressed

    private void fullSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullSpeedActionPerformed
        // TODO add your handling code here:
        if (fullSpeed.isSelected() == true) {
            tapeSpeed.setEnabled(false);
            tapeFullSpeed = true;
        } else {
            tapeSpeed.setEnabled(true);
            tapeFullSpeed = false;
        }
    }//GEN-LAST:event_fullSpeedActionPerformed

    private void EncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncodeActionPerformed
        // TODO add your handling code here:
        if ("".equals(program.getText()) && "Universal Turing Machine".equals(programTXT)
                || "// Universal Turing Machine\n// Write it.".equals(program.getText())
                || "Please load or write a turing machine program.".equals(program.getText())
                || "Please load program in control menu.".equals(program.getText())
                || "".equals(program.getText())) {
            program.setText("Please load or write a turing machine program.");
        } else {
            UTMStringReader(program.getText());
            String[] eProgram = UTM.Encoding(TM_P.getUTM());
            program.setText("");
            for (int i = 0; i < eProgram.length; i++) {
                program.append(eProgram[i] + "\n");
            }
        }
    }//GEN-LAST:event_EncodeActionPerformed

    private void DecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecodeActionPerformed
        // TODO add your handling code here:
        if ("".equals(program.getText()) && "Universal Turing Machine".equals(programTXT)
                || "// Universal Turing Machine\n// Write it.".equals(program.getText())
                || "Please load or write a turing machine program.".equals(program.getText())
                || "Please load program in control menu.".equals(program.getText())
                || "".equals(program.getText())) {
            program.setText("Please load or write a turing machine program.");
        } else {
            String prog = program.getText();
            for (int i = 0; i < prog.length(); i++) {
                if (prog.charAt(i) == 'R' || prog.charAt(i) == 'L'
                        || prog.charAt(i) == 'S' || prog.charAt(i) == 'r'
                        || prog.charAt(i) == 'l' || prog.charAt(i) == 's') {
                    UTMStringReader(program.getText());
                    return;
                }
            }
            String isDecode = program.getText();
            if (isDecode != null && isDecode.charAt(0) != '(') {
                String[][] dProgram = UTM.Decoding(program.getText());
                program.setText("");
                for (int i = 0; i < dProgram.length; i++) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            program.append("(q");
                        }
                        if (j == 1 || j == 3) {
                            program.append(", ");
                        }
                        if (j == 2) {
                            program.append(") = (q");
                        }
                        if (j == 4) {
                            program.append(", ");
                        }
                        program.append(dProgram[i][j]);
                        if (j == 4) {
                            program.append(")");
                        }
                    }
                    program.append("\n");
                }
            }
        }
        UTMStringReader(program.getText());
    }//GEN-LAST:event_DecodeActionPerformed

    private void tapeSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tapeSpeedStateChanged
        // TODO add your handling code here:
        UTM.setTapeSpeed(tapeSpeed.getValue());
    }//GEN-LAST:event_tapeSpeedStateChanged

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        ImageIcon icon = new ImageIcon(UTM.class.getResource("Exit (32 x 32).png"));
        if (JOptionPane.showConfirmDialog(null, "Do you want to Exit.", "Universal Turing Machine",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            // yes option
            this.dispose();
        }
    }//GEN-LAST:event_ExitActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        // TODO add your handling code here:
        ImageIcon icon = new ImageIcon(UTM.class.getResource("UTM Icon (24 x 24).png"));
        Object[] options = {"Close"};
        int n = JOptionPane.showOptionDialog(this.rootPane,
                "Universal Turing Machine are based on software from "
                + "Fast Student (Bilal).",
                "About",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                icon,
                options,
                options[0]);
    }//GEN-LAST:event_AboutActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HelpActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Documents", "txt");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (!chooser.getSelectedFile().getAbsolutePath().endsWith(".txt")) {
                ImageIcon icon = new ImageIcon(UTM.class.getResource("Exit (32 x 32).png"));
                Object[] options = {"  OK  "};
                int n = JOptionPane.showOptionDialog(this.rootPane,
                        "Program not Loaded.",
                        "Error",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        icon,
                        options,
                        options[0]);
                return;
            }
            loadProgram.setSelectedItem("Universal Turing Machine");
            String location = chooser.getSelectedFile().getAbsolutePath();
            String read = "";
            read = readFile(location);
            program.setText(read);
        } else {
            return;
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed
        // TODO add your handling code here:
        JFileChooser saver = new JFileChooser(".txt");
        int returnVal = saver.showSaveDialog(this);
        File file = saver.getSelectedFile();
        BufferedWriter writer = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                writer = new BufferedWriter(new FileWriter(file.getAbsolutePath() + ".txt"));
                writer.write(program.getText());
                writer.close();
                JOptionPane.showMessageDialog(this, "The Program was Saved Successfully!",
                        "Success!", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "The Program could not be Saved!",
                        "Error!", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveAsActionPerformed

    private void tapeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tapeMouseClicked
        // TODO add your handling code here:
        if (this.getExtendedState() == NORMAL) {
            if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                evt.consume();
                if (maxTape) {
                    maxTape = false;
                    jPanel1.setSize(950, 105);
                    tape.setSize(938, 82);
                    jScrollPane2.setSize(938, 82);
                } else {
                    maxTape = true;
                    jPanel1.setSize(950, 590);
                    tape.setSize(938, 565);
                    jScrollPane2.setSize(938, 565);
                }
            }
        }
        this.setExtendedState(NORMAL);
    }//GEN-LAST:event_tapeMouseClicked

    public String readFile(String location) {
        
        String content = "";
        Path file = Paths.get(location);
        try (InputStream in = Files.newInputStream(file);
                BufferedReader reader
                = new BufferedReader(new InputStreamReader(in))) {
            String line = null;
            while ((line = reader.readLine()) != null) {
                content += line + '\n';
            }
        } catch (IOException x) {
            System.err.println(x);
        }
        return content;
    }

    public String UTMFiling(String location) {
        String tmpPrev = "";
        final int columnMax = 5;
        int rowCount = 0;
        String[][] tmpUTM;
        try {
            BufferedReader br = new BufferedReader(new FileReader(location));
            String Line;
            //Read File Line By Line
            while ((Line = br.readLine()) != null) {
                rowCount++;
            }
            if (rowCount != 0) {
                br = new BufferedReader(new FileReader(location));
            }
            tmpUTM = new String[rowCount][columnMax];
            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < columnMax; j++) {
                    tmpUTM[i][j] = "";
                }
            }
            int x = 0, y = 0;
            while ((Line = br.readLine()) != null) {
                // Print the content on the console
                //program.append(Line + "\n");
                tmpPrev += Line + "\n";
                int i = 0;
                while (Line.charAt(i) == '(' || Line.charAt(i) == 'q'
                        || Line.charAt(i) == ' ') {
                    i++;
                }
                while (Line.charAt(i) != ',' && Line.charAt(i) != ' ') {
                    if (Line.charAt(i) == 'D') {
                        tmpUTM[x][y] += String.valueOf("\u25CA");
                    } else {
                        tmpUTM[x][y] += String.valueOf(Line.charAt(i));
                    }
                    //System.out.print(Line.charAt(i)); //[][0]
                    i++;
                }
                y++;
                while (Line.charAt(i) == ',' || Line.charAt(i) == ' ') {
                    i++;
                }
                if (Line.charAt(i) == 'D') {
                    tmpUTM[x][y] += String.valueOf("\u25CA");
                } else {
                    tmpUTM[x][y] += String.valueOf(Line.charAt(i));
                }
                //System.out.print(Line.charAt(i)); //[][1]
                i++;
                y++;
                while (Line.charAt(i) == ')' || Line.charAt(i) == ' '
                        || Line.charAt(i) == '=' || Line.charAt(i) == '(' || Line.charAt(i) == 'q') {
                    i++;
                }
                while (Line.charAt(i) != ',' && Line.charAt(i) != ' ') {
                    if (Line.charAt(i) == 'D') {
                        tmpUTM[x][y + 2] += String.valueOf("\u25CA");
                    } else {
                        tmpUTM[x][y + 2] += String.valueOf(Line.charAt(i));
                    }
                    //System.out.print(Line.charAt(i)); //[][2] 
                    i++;
                }
                y++;
                while (Line.charAt(i) == ',' || Line.charAt(i) == ' ') {
                    i++;
                }
                if (Line.charAt(i) == 'D') {
                    tmpUTM[x][y - 1] += String.valueOf("\u25CA");
                } else {
                    tmpUTM[x][y - 1] += String.valueOf(Line.charAt(i));
                }
                //System.out.print(Line.charAt(i)); //[][3]
                i++;
                y++;
                while (Line.charAt(i) == ',' || Line.charAt(i) == ' ') {
                    i++;
                }
                if (Line.charAt(i) == 'D') {
                    tmpUTM[x][y - 1] += String.valueOf("\u25CA");
                } else {
                    tmpUTM[x][y - 1] += String.valueOf(Line.charAt(i));
                }
                //System.out.println(Line.charAt(i)); //[][4]
                y = 0;
                x++;
            }
            br.close(); //Close the input stream
        } catch (Exception e) {//Catch exception if any
            System.err.println(" \u25B6 Error: " + e.getMessage());
            return "Exception Error.";
        } finally {
            //in.close();
        }
        TM_P.setUTM(tmpUTM, rowCount, columnMax);
        try {
            //System.out.println("   File has been open successfully.");
        } catch (Exception e) {                     //Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }
        return tmpPrev;
    }

    public String UTMStringReader(String location) {
        String tmpPrev = "";
        final int columnMax = 5;
        int rowCount = 0;
        String[][] tmpUTM;
        try {
            BufferedReader br = new BufferedReader(new StringReader(location));
            String Line;
            //Read File Line By Line
            while ((Line = br.readLine()) != null) {
                rowCount++;
            }
            if (rowCount != 0) {
                br = new BufferedReader(new StringReader(location));
            }
            tmpUTM = new String[rowCount][columnMax];
            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < columnMax; j++) {
                    tmpUTM[i][j] = "";
                }
            }
            int x = 0, y = 0;
            while ((Line = br.readLine()) != null) {
                // Print the content on the console
                //program.append(Line + "\n");
                tmpPrev += Line + "\n";
                int i = 0;
                while (Line.charAt(i) == '(' || Line.charAt(i) == 'q'
                        || Line.charAt(i) == ' ') {
                    i++;
                }
                while (Line.charAt(i) != ',' && Line.charAt(i) != ' ') {
                    if (Line.charAt(i) == 'D') {
                        tmpUTM[x][y] += String.valueOf("\u25CA");
                    } else {
                        tmpUTM[x][y] += String.valueOf(Line.charAt(i));
                    }
                    //System.out.print(Line.charAt(i)); //[][0]
                    i++;
                }
                y++;
                while (Line.charAt(i) == ',' || Line.charAt(i) == ' ') {
                    i++;
                }
                if (Line.charAt(i) == 'D') {
                    tmpUTM[x][y] += String.valueOf("\u25CA");
                } else {
                    tmpUTM[x][y] += String.valueOf(Line.charAt(i));
                }
                //System.out.print(Line.charAt(i)); //[][1]
                i++;
                y++;
                while (Line.charAt(i) == ')' || Line.charAt(i) == ' '
                        || Line.charAt(i) == '=' || Line.charAt(i) == '(' || Line.charAt(i) == 'q') {
                    i++;
                }
                while (Line.charAt(i) != ',' && Line.charAt(i) != ' ') {
                    if (Line.charAt(i) == 'D') {
                        tmpUTM[x][y + 2] += String.valueOf("\u25CA");
                    } else {
                        tmpUTM[x][y + 2] += String.valueOf(Line.charAt(i));
                    }
                    //System.out.print(Line.charAt(i)); //[][2] 
                    i++;
                }
                y++;
                while (Line.charAt(i) == ',' || Line.charAt(i) == ' ') {
                    i++;
                }
                if (Line.charAt(i) == 'D') {
                    tmpUTM[x][y - 1] += String.valueOf("\u25CA");
                } else {
                    tmpUTM[x][y - 1] += String.valueOf(Line.charAt(i));
                }
                //System.out.print(Line.charAt(i)); //[][3]
                i++;
                y++;
                while (Line.charAt(i) == ',' || Line.charAt(i) == ' ') {
                    i++;
                }
                if (Line.charAt(i) == 'D') {
                    tmpUTM[x][y - 1] += String.valueOf("\u25CA");
                } else {
                    tmpUTM[x][y - 1] += String.valueOf(Line.charAt(i));
                }
                //System.out.println(Line.charAt(i)); //[][4]
                y = 0;
                x++;
            }
            TM_P.setUTM(tmpUTM, rowCount, columnMax);
        } catch (Exception e) {//Catch exception if any
            //System.err.println(" \u25B6 Error: " + e.getMessage());
            //return "Exception Error.";
        } finally {
            //in.close();
        }
        return tmpPrev;
    }

    private void setIcon() {
        //setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("UTM Icon.png")));
        setIconImage(new ImageIcon(getClass().getResource("UTM Icon.png")).getImage());
    }

    private void otherProperties() {
        tapeSpeed.setValue(70);
        Encode.setEnabled(false);
        Decode.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UTM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UTM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UTM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UTM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UTM().setVisible(true);
            }
        });
    }

    // Object declaration
    private boolean isProgramLoad = false;
    UTM_Implement UTM = new UTM_Implement();
    TuringMachine_Programs TM_P = new TuringMachine_Programs();
    String programTXT = "";
    boolean tapeFullSpeed = false;
    Color programColor = null;
    boolean maxTape = false;
    Dimension tapeSize;
    Dimension panelSize;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JButton Decode;
    private javax.swing.JButton Encode;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JTextField currentState;
    private javax.swing.JTextField finalState;
    private javax.swing.JCheckBox fullSpeed;
    private javax.swing.JTextField initialInput;
    private javax.swing.JTextField initialState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JComboBox loadProgram;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JTextArea program;
    private javax.swing.JButton reset;
    private javax.swing.JButton run;
    private javax.swing.JMenuItem saveAs;
    private javax.swing.JTextField steps;
    private javax.swing.JTextArea tape;
    private javax.swing.JSlider tapeSpeed;
    // End of variables declaration//GEN-END:variables

}
